-- Supabase Database Setup for Vietnamese School Management System
-- Run these commands in your Supabase SQL Editor

-- Enable RLS (Row Level Security)
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON tables TO anon, authenticated;

-- Create profiles table (extends auth.users)
CREATE TABLE IF NOT EXISTS public.profiles (
    id UUID REFERENCES auth.users ON DELETE CASCADE,
    email TEXT,
    role TEXT CHECK (role IN ('admin', 'bcs', 'student')) NOT NULL DEFAULT 'student',
    full_name TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    PRIMARY KEY (id)
);

-- Create timetable table
CREATE TABLE IF NOT EXISTS public.timetable (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ngay DATE NOT NULL,
    gio TIME NOT NULL,
    mon TEXT NOT NULL,
    phong TEXT NOT NULL,
    created_by UUID REFERENCES auth.users ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create posts table
CREATE TABLE IF NOT EXISTS public.posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tieu_de TEXT NOT NULL,
    noi_dung TEXT NOT NULL,
    ngay DATE NOT NULL,
    created_by UUID REFERENCES auth.users ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create survey table
CREATE TABLE IF NOT EXISTS public.survey (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cau_hoi TEXT NOT NULL,
    loai TEXT CHECK (loai IN ('multiple_choice', 'text')) NOT NULL DEFAULT 'text',
    options TEXT[],
    created_by UUID REFERENCES auth.users ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL
);

-- Create survey_responses table
CREATE TABLE IF NOT EXISTS public.survey_responses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    survey_id BIGINT REFERENCES public.survey ON DELETE CASCADE,
    user_id UUID REFERENCES auth.users ON DELETE CASCADE,
    answer TEXT NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    UNIQUE(survey_id, user_id)
);

-- Create read_posts table (tracks which students read which posts)
CREATE TABLE IF NOT EXISTS public.read_posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    post_id BIGINT REFERENCES public.posts ON DELETE CASCADE,
    user_id UUID REFERENCES auth.users ON DELETE CASCADE,
    read_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
    UNIQUE(post_id, user_id)
);

-- Enable Row Level Security on all tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.timetable ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.survey ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.survey_responses ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.read_posts ENABLE ROW LEVEL SECURITY;

-- Create policies for profiles table
CREATE POLICY "Users can view all profiles" ON public.profiles
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Users can update own profile" ON public.profiles
    FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can insert own profile" ON public.profiles
    FOR INSERT WITH CHECK (auth.uid() = id);

-- Create policies for timetable table
CREATE POLICY "Everyone can view timetable" ON public.timetable
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Admin and BCS can manage timetable" ON public.timetable
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role IN ('admin', 'bcs')
        )
    );

-- Create policies for posts table
CREATE POLICY "Everyone can view posts" ON public.posts
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Admin and BCS can manage posts" ON public.posts
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role IN ('admin', 'bcs')
        )
    );

-- Create policies for survey table
CREATE POLICY "Everyone can view surveys" ON public.survey
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Admin and BCS can manage surveys" ON public.survey
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role IN ('admin', 'bcs')
        )
    );

-- Create policies for survey_responses table
CREATE POLICY "Students can view own responses" ON public.survey_responses
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Students can insert own responses" ON public.survey_responses
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Admin and BCS can view all responses" ON public.survey_responses
    FOR SELECT USING (
        EXISTS (
            SELECT 1 FROM public.profiles 
            WHERE profiles.id = auth.uid() 
            AND profiles.role IN ('admin', 'bcs')
        )
    );

-- Create policies for read_posts table
CREATE POLICY "Students can manage own read status" ON public.read_posts
    FOR ALL USING (auth.uid() = user_id);

-- Create function to handle new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger AS $$
BEGIN
    INSERT INTO public.profiles (id, email, role, full_name)
    VALUES (
        NEW.id,
        NEW.email,
        'student', -- default role
        COALESCE(NEW.raw_user_meta_data->>'full_name', '')
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY definer;

-- Create trigger to automatically create profile for new users
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_timetable_date ON public.timetable(ngay);
CREATE INDEX IF NOT EXISTS idx_posts_date ON public.posts(ngay);
CREATE INDEX IF NOT EXISTS idx_survey_responses_survey_id ON public.survey_responses(survey_id);
CREATE INDEX IF NOT EXISTS idx_survey_responses_user_id ON public.survey_responses(user_id);
CREATE INDEX IF NOT EXISTS idx_read_posts_user_id ON public.read_posts(user_id);
CREATE INDEX IF NOT EXISTS idx_read_posts_post_id ON public.read_posts(post_id);

-- Insert some sample data (optional)
-- You can uncomment these lines to add sample data

-- INSERT INTO public.timetable (ngay, gio, mon, phong, created_by) VALUES
-- ('2024-01-15', '08:00', 'Toán học', 'A101', (SELECT id FROM auth.users LIMIT 1)),
-- ('2024-01-15', '09:00', 'Văn học', 'A102', (SELECT id FROM auth.users LIMIT 1)),
-- ('2024-01-15', '10:00', 'Tiếng Anh', 'B201', (SELECT id FROM auth.users LIMIT 1));

-- INSERT INTO public.posts (tieu_de, noi_dung, ngay, created_by) VALUES
-- ('Thông báo nghỉ học', 'Trường sẽ nghỉ học vào ngày 20/1 do thời tiết xấu.', '2024-01-10', (SELECT id FROM auth.users LIMIT 1)),
-- ('Lịch thi cuối kỳ', 'Lịch thi cuối kỳ đã được cập nhật. Vui lòng xem chi tiết trong phần lịch học.', '2024-01-12', (SELECT id FROM auth.users LIMIT 1));

-- INSERT INTO public.survey (cau_hoi, loai, options, created_by) VALUES
-- ('Bạn hài lòng với chất lượng dạy học như thế nào?', 'multiple_choice', ARRAY['Rất hài lòng', 'Hài lòng', 'Bình thường', 'Không hài lòng'], (SELECT id FROM auth.users LIMIT 1)),
-- ('Góp ý về cải thiện chương trình học', 'text', NULL, (SELECT id FROM auth.users LIMIT 1));
